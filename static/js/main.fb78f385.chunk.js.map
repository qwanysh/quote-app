{"version":3,"sources":["consts.js","components/CategoryList/CategoryList.js","axiosApi.js","helpers.js","components/QuoteList/QuoteCard/QuoteCard.js","components/QuoteList/QuoteList.js","containers/Quotes/Quotes.js","components/Navbar/Navbar.js","containers/QuoteCreate/QuoteCreate.js","containers/QuoteEdit/QuoteEdit.js","components/Page404/Page404.js","containers/App.js","reportWebVitals.js","index.js"],"names":["categories","id","name","CategoryList","Pane","borderRight","Menu","Group","Item","is","Link","to","Divider","map","category","axios","create","baseURL","isValid","quote","author","text","trim","length","QuoteCard","onDelete","useState","spinner","setSpinner","display","flexDirection","justifyContent","border","marginBottom","className","Text","padding","borderTop","alignItems","Heading","size","marginRight","Button","intent","isLoading","onClick","quoteId","delete","then","toaster","success","QuoteList","quotes","bind","Quotes","props","setQuotes","setCategory","useEffect","categoryId","match","params","categoryObj","find","history","replace","url","get","response","data","Object","entries","getQuotes","paddingY","paddingRight","flexGrow","Spinner","marginX","filter","Navbar","borderBottom","color","textDecoration","QuoteCreate","setQuote","changeHandler","event","quoteCopy","target","value","SelectField","label","onChange","TextInputField","placeholder","TextareaField","alignSelf","post","createQuote","push","disabled","QuoteEdit","getQuoteDetails","put","updateQuote","Page404","ErrorIcon","App","basename","maxWidth","paddingX","path","exact","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb78f385.chunk.js","sourcesContent":["export const categories = [\n  {id: 'humour', name: 'Humour'},\n  {id: 'love', name: 'Love'},\n  {id: 'motivation', name: 'Motivation'},\n  {id: 'life', name: 'Life'},\n];","import React from 'react';\nimport {Menu, Pane} from 'evergreen-ui';\nimport {Link} from 'react-router-dom';\nimport {categories} from '../../consts';\n\nconst CategoryList = () => {\n  return (\n      <Pane borderRight>\n        <Menu>\n          <Menu.Group>\n            <Menu.Item is={Link} to=\"/\">All</Menu.Item>\n          </Menu.Group>\n          <Menu.Divider/>\n          <Menu.Group>\n            {categories.map(category => (\n                <Menu.Item\n                    key={category.id}\n                    is={Link}\n                    to={`/quotes/${category.id}`}\n                >{category.name}</Menu.Item>\n            ))}\n          </Menu.Group>\n        </Menu>\n      </Pane>\n  );\n};\n\nexport default CategoryList;","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://qwanysh-api.firebaseio.com',\n});","import axios from './axiosApi';\n\n\nexport const createQuote = quote => {\n  return axios.post('/quotes.json', quote);\n};\n\nexport const getQuotes = category => {\n  const url = category ? `/quotes.json?orderBy=\"category\"&equalTo=\"${category.id}\"` : '/quotes.json';\n  return axios.get(url).then(response => {\n    const quotes = response.data;\n    return quotes ? Object.entries(quotes)\n        .map(([id, quote]) => ({...quote, id})) : [];\n  });\n};\n\nexport const deleteQuote = quoteId => {\n  return axios.delete(`/quotes/${quoteId}.json`);\n};\n\nexport const getQuoteDetails = quoteId => {\n  return axios.get(`/quotes/${quoteId}.json`)\n      .then(response => ({...response.data, id: quoteId}));\n};\n\nexport const updateQuote = quote => {\n  return axios.put(`/quotes/${quote.id}.json`, quote);\n};\n\nexport const isValid = quote => {\n  const {author, text} = quote;\n  return author.trim().length && text.trim().length;\n};","import React, {useState} from 'react';\nimport {Button, Heading, Pane, Text, toaster} from 'evergreen-ui';\nimport {deleteQuote} from '../../../helpers';\nimport {Link} from 'react-router-dom';\n\nconst QuoteCard = ({quote, onDelete}) => {\n  const [spinner, setSpinner] = useState(false);\n  const deleteHandler = () => {\n    setSpinner(true);\n    deleteQuote(quote.id).then(() => {\n      setSpinner(false);\n      onDelete();\n      toaster.success('Quote deleted');\n    });\n  };\n\n  return (\n      <Pane display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" border marginBottom={10}\n            className=\"fadeIn\">\n        <Text padding={10}>{quote.text}</Text>\n        <Pane borderTop padding={10} display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\">\n          <Heading size={100} marginRight=\"auto\">{quote.author}</Heading>\n          <Button\n              marginRight={5}\n              intent=\"warning\"\n              is={Link}\n              to={`/quotes/${quote.id}/edit`}\n          >Edit</Button>\n          <Button\n              intent=\"danger\"\n              isLoading={spinner}\n              onClick={deleteHandler}\n          >Delete</Button>\n        </Pane>\n      </Pane>\n  );\n};\n\nexport default QuoteCard;","import React from 'react';\nimport QuoteCard from './QuoteCard/QuoteCard';\nimport {Text} from 'evergreen-ui';\n\nconst QuoteList = ({quotes, onDelete}) => {\n  return quotes.length ? quotes.map(quote => (\n      <QuoteCard key={quote.id} quote={quote} onDelete={onDelete.bind(this, quote.id)}/>\n  )) : <Text className=\"fadeIn\">No quotes here :(</Text>;\n};\n\nexport default QuoteList;","import React, {useEffect, useState} from 'react';\nimport {Heading, Pane, Spinner} from 'evergreen-ui';\nimport CategoryList from '../../components/CategoryList/CategoryList';\nimport {getQuotes} from '../../helpers';\nimport {categories} from '../../consts';\nimport QuoteList from '../../components/QuoteList/QuoteList';\n\nconst Quotes = props => {\n  const [spinner, setSpinner] = useState(false);\n  const [quotes, setQuotes] = useState([]);\n  const [category, setCategory] = useState(null);\n\n  const deleleQuoteHandler = quoteId => {\n    setQuotes(quotes.filter(({id}) => id !== quoteId));\n  };\n\n  useEffect(() => {\n    const {categoryId} = props.match.params;\n    const categoryObj = categories.find(({id}) => id === categoryId);\n\n    if (categoryId && !categoryObj) {\n      props.history.replace('/404');\n    }\n\n    setCategory(categoryId ? categoryObj : null);\n  }, [props.match.params]);\n\n  useEffect(() => {\n    const {categoryId} = props.match.params;\n    if (categoryId && !category) return;\n\n    setSpinner(true);\n    getQuotes(category).then(quotes => {\n      setSpinner(false);\n      setQuotes(quotes);\n    });\n  }, [category]);\n\n  return (\n      <Pane paddingY={40} display=\"flex\" className=\"fadeIn\">\n        <CategoryList/>\n        <Pane padding={10} paddingRight={0} flexGrow={1}>\n          <Heading marginBottom={10}>{category ? category.name : 'All'}</Heading>\n          {spinner ? <Spinner size={40} marginX=\"auto\"/> : (\n              <QuoteList quotes={quotes} onDelete={deleleQuoteHandler}/>\n          )}\n        </Pane>\n      </Pane>\n  );\n};\n\nexport default Quotes;","import React from 'react';\nimport {Heading, Pane} from 'evergreen-ui';\nimport {Link} from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n      <Pane paddingY={20} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" borderBottom>\n        <Heading>Quotes App</Heading>\n        <Pane display=\"flex\" alignItems=\"center\">\n          <Pane is={Link} to=\"/\" color=\"inherit\" textDecoration=\"none\" marginRight={20}>Quotes</Pane>\n          <Pane is={Link} to=\"/add-quote\" color=\"inherit\" textDecoration=\"none\">Submit new Quote</Pane>\n        </Pane>\n      </Pane>\n  );\n};\n\nexport default Navbar;","import React, {useState} from 'react';\nimport {Button, Heading, Pane, SelectField, TextareaField, TextInputField, toaster} from 'evergreen-ui';\nimport {categories} from '../../consts';\nimport {createQuote, isValid} from '../../helpers';\n\nconst QuoteCreate = ({history}) => {\n  const [spinner, setSpinner] = useState(false);\n  const [quote, setQuote] = useState({\n    category: categories[0].id,\n    author: '',\n    text: '',\n  });\n\n  const changeHandler = event => {\n    const quoteCopy = {...quote};\n    quoteCopy[event.target.name] = event.target.value;\n    setQuote(quoteCopy);\n  };\n\n  const submitHandler = () => {\n    if (isValid(quote)) {\n      setSpinner(true);\n      createQuote(quote).then(() => {\n        setSpinner(false);\n        toaster.success('Quote added');\n        history.push('/');\n      });\n    }\n  };\n\n  return (\n      <Pane paddingY={40} display=\"flex\" flexDirection=\"column\" className=\"fadeIn\">\n        <Heading marginBottom={10}>Create Quote</Heading>\n        <SelectField\n            label=\"Category\"\n            value={quote.category}\n            name=\"category\"\n            onChange={changeHandler}\n        >\n          {categories.map(category => (\n              <option\n                  key={category.id}\n                  value={category.id}\n              >{category.name}</option>\n          ))}\n        </SelectField>\n        <TextInputField\n            label=\"Author\"\n            placeholder=\"Enter author name\"\n            value={quote.author}\n            name=\"author\"\n            onChange={changeHandler}\n        />\n        <TextareaField\n            label=\"Quote text\"\n            placeholder=\"Enter quote text\"\n            value={quote.text}\n            name=\"text\"\n            onChange={changeHandler}\n        />\n        <Button\n            alignSelf=\"flex-end\"\n            onClick={submitHandler}\n            isLoading={spinner}\n            disabled={!isValid(quote)}\n            intent=\"success\"\n        >Save</Button>\n      </Pane>\n  );\n};\n\nexport default QuoteCreate;","import React, {useEffect, useState} from 'react';\nimport {Button, Heading, Pane, SelectField, TextareaField, TextInputField, toaster} from 'evergreen-ui';\nimport {categories} from '../../consts';\nimport {getQuoteDetails, isValid, updateQuote} from '../../helpers';\nimport {Link} from 'react-router-dom';\n\nconst QuoteEdit = props => {\n  const [spinner, setSpinner] = useState(false);\n  const [quote, setQuote] = useState({\n    category: '',\n    author: '',\n    text: '',\n  });\n\n  const changeHandler = event => {\n    const quoteCopy = {...quote};\n    quoteCopy[event.target.name] = event.target.value;\n    setQuote(quoteCopy);\n  };\n\n  const submitHandler = () => {\n    if (isValid(quote)) {\n      setSpinner(true);\n      updateQuote(quote).then(() => {\n        setSpinner(false);\n        toaster.success('Quote saved');\n      });\n    }\n  };\n\n  useEffect(() => {\n    const {quoteId} = props.match.params;\n    getQuoteDetails(quoteId).then(quote => {\n      setQuote(quote);\n    });\n  }, [props.match.params]);\n\n  return (\n      <Pane paddingY={40} display=\"flex\" flexDirection=\"column\" className=\"fadeIn\">\n        <Heading marginBottom={10}>Edit Quote</Heading>\n        <SelectField\n            label=\"Category\"\n            value={quote.category}\n            name=\"category\"\n            onChange={changeHandler}\n        >\n          {categories.map(category => (\n              <option\n                  key={category.id}\n                  value={category.id}\n              >{category.name}</option>\n          ))}\n        </SelectField>\n        <TextInputField\n            label=\"Author\"\n            placeholder=\"Enter author name\"\n            value={quote.author}\n            name=\"author\"\n            onChange={changeHandler}\n        />\n        <TextareaField\n            label=\"Quote text\"\n            placeholder=\"Enter quote text\"\n            value={quote.text}\n            name=\"text\"\n            onChange={changeHandler}\n        />\n        <Pane display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\">\n          <Button\n              is={Link}\n              to=\"/\"\n              marginRight={10}\n          >Back to quotes</Button>\n          <Button\n              onClick={submitHandler}\n              isLoading={spinner}\n              disabled={!isValid(quote)}\n              intent=\"success\"\n          >Save</Button>\n        </Pane>\n      </Pane>\n  );\n};\n\nexport default QuoteEdit;","import React from 'react';\nimport {ErrorIcon, Heading, Pane} from 'evergreen-ui';\n\nconst Page404 = () => {\n  return (\n      <Pane paddingY={40} className=\"fadeIn\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <ErrorIcon color=\"muted\" size={40} marginBottom={20}/>\n        <Heading>404 Not found</Heading>\n      </Pane>\n  );\n};\n\nexport default Page404;","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Redirect, Route, Switch} from 'react-router';\nimport Quotes from './Quotes/Quotes';\nimport Navbar from '../components/Navbar/Navbar';\nimport {Pane} from 'evergreen-ui';\nimport QuoteCreate from './QuoteCreate/QuoteCreate';\nimport QuoteEdit from './QuoteEdit/QuoteEdit';\nimport Page404 from '../components/Page404/Page404';\n\nconst App = () => {\n  return (\n      <BrowserRouter basename=\"/quote-app/\">\n        <Pane maxWidth={640} paddingX={20} marginX=\"auto\">\n          <Navbar/>\n          <Switch>\n            <Route path=\"/\" exact render={props => (\n                <Quotes {...props}/>\n            )}/>\n            <Route path=\"/quotes/:categoryId\" exact render={props => (\n                <Quotes {...props}/>\n            )}/>\n            <Route path=\"/add-quote\" exact render={props => (\n                <QuoteCreate {...props}/>\n            )}/>\n            <Route path=\"/quotes/:quoteId/edit\" exact render={props => (\n                <QuoteEdit {...props}/>\n            )}/>\n            <Route path=\"/404\" exact component={Page404}/>\n            <Route path=\"/\">\n              <Redirect to=\"/404\"/>\n            </Route>\n          </Switch>\n        </Pane>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}